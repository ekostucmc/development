package vwg.vw.inca.handler;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.faces.component.html.HtmlCommandLink;
import javax.faces.event.ActionEvent;

import org.primefaces.component.datatable.DataTable;
import org.springframework.jdbc.UncategorizedSQLException;

import de.volkswagen.bkm.util.CollectionsToolkit;
import vwg.vw.inca.handler.util.DunsParam;
import vwg.vw.inca.model.Duns;
import vwg.vw.inca.model.FreigabeStatus;
import vwg.vw.inca.model.IncaConfigModel;
import vwg.vw.inca.model.Land;
import vwg.vw.inca.model.Lieferant;
import vwg.vw.inca.model.LieferantAuswahlModel;
import vwg.vw.inca.model.LieferantSuchfilter;
import vwg.vw.inca.util.I18N;
import vwg.vw.inca.util.ManagedBeanProvider;

/**
 * <p>
 * Handler-Implementierung fuer die Auswahl von Lieferanten
 * 
 */
public class LieferantAuswahlHandler extends AbstractAuswahlHandler<LieferantAuswahlModel> {

	/** Suchfilter f端r die Lieferanten-Suche. */
	private LieferantSuchfilter suchfilter;

	/** Flag, das angibt, dass die Suche einmal ausgef端hrt wurde */
	private boolean sucheAusgefuehrt;

	/**
	 * Aktion fuer die Uebernahme der gefundenen Elemente.
	 *
	 * @return Outcome.
	 */
	public String actionAllesAuswaehlen() {
		for (final Duns duns : getModel().getSearchResultLieferantList()) {
			if (!getModel().isMaxLieferantSelected()) {
				if (!getModel().getSelectedLieferantList().contains(duns)) {
					getModel().getSelectedLieferantList().add(duns);
				}
			}
		}
		Collections.sort(getModel().getSelectedLieferantList());
		updateDialogSettingsChanged();
		return null;
	}
	/**
	 * Aktion fuer die Aufhebung der bisher selektierten Elemente.
	 *
	 * @return Outcome.
	 */
	public String actionAuswahlAufheben() {
		// Die gewaehlten Lieferanten aufheben.
		getModel().getSelectedLieferantList().clear();
		updateDialogSettingsChanged();
		return null;
	}

	/**
	 * Aktion zum Zuruecksetzen des Filters.
	 *
	 * @return Outcome.
	 */
	public String actionResetFilter() {
		// Filter zuruecksetzen.
		initSuchfilter();
		// Suchergebnis zuruecksetzen. (vosvrachenie)
		getModel().getSearchResultLieferantList().clear();
		this.sucheAusgefuehrt = false;
		return null;
	}

	/**
	 * Aktion fuer die Suche mit dem Filter.
	 *
	 * @return Outcome.
	 */
	public String actionSearch() {
		getModel().getSearchResultLieferantList().clear();

		final IncaConfigModel configModel = ManagedBeanProvider.getIncaConfigHandler().getModel();
		final int maxAnzahl = configModel.getMaxAnzahlLieferantenLieferantenFreigabe();

		List<Lieferant> sucheLieferantList;
		try {
			final DunsParam dunsParams = DunsParam.prepareDunsSearchParams();
			sucheLieferantList = getDaoHelper().sucheLieferant(this.suchfilter, maxAnzahl, false,
				false, null, getModel().isDunsBaum(), dunsParams.getDuns(), null);
		} catch (final UncategorizedSQLException sqlException) {
			sucheLieferantList = new ArrayList<>();
			ManagedBeanProvider.getExceptionHandler()
				.handleUncategorizedSQLExceptionWithSendRedirect(sqlException, "initSuche",
					getClass().getName(), ExceptionHandler.ERROR_LOGLEVEL);
		}

		final List<Duns> sucheDunsList = new ArrayList<>();
		for (final Lieferant lieferant : sucheLieferantList) {
			sucheDunsList.add(new Duns(lieferant));
		}

		getModel().getSearchResultLieferantList().addAll(sucheDunsList);

		this.sucheAusgefuehrt = true;

		return null;
	}

	/**
	 * Gibt die Standard-Anzahl der Suchtreffer pro Ergebnisseite zur端ck.
	 *
	 * @return the Anzahl Suchtreffer pro Ergebnisseite
	 */
	public int getDefaultAnzahlProSeite() {
		final IncaConfigModel incaConfigModel = ManagedBeanProvider.getIncaConfigHandler()
			.getModel();
		return incaConfigModel.getAnzahlLieferantenProSeite();
	}

	/**
	 * Lokalisierter Text, der angezeigt werden soll, wenn keine Ergebnisse gefunden werden.
	 *
	 * @return String
	 */
	public String getKeinErgebnisText() {
		if (!sucheAusgefuehrt) {
			return "";
		}

		return I18N.getString("ihre_suche_ergab_keine_treffer");
	}

	/**
	 * Suchfilter f端r die Lieferanten-Suche.
	 *
	 * @return Suchfilter.
	 */
	public LieferantSuchfilter getSuchfilter() {
		return this.suchfilter;
	}

	/**
	 * @return the sucheAusgefuehrt
	 */
	public boolean isSucheAusgefuehrt() {
		return this.sucheAusgefuehrt;
	}

	/**
	 * @see vwg.vw.inca.handler.AbstractAuswahlHandler#openAuswahlBox()
	 */
	@Override
	public void openAuswahlBox() {
		// Initialisierung der Suchkriterien vornehmen.
		initSuchfilter();

		// Suchergebnis wird nicht zurueckgesetzt.
		// this.noSearchResult = false;
		// getModel().getSearchResultLieferantList().clear();

		super.openAuswahlBox();
	}

	/**
	 * ActionListener-Methode fuer das Entfernen eines Lieferanten aus der Selektion.
	 *
	 * @param event
	 *            {@link ActionEvent} Instanz.
	 */
	public void removeLieferant(final ActionEvent event) {
		final HtmlCommandLink link = (HtmlCommandLink) event.getComponent();
		final DataTable dataTable = (DataTable) link.getParent().getParent();
		final Object rowData = dataTable.getRowData();
		final Duns duns = (Duns) rowData;
		getModel().getSelectedLieferantList().remove(duns);
		updateDialogSettingsChanged();
	}

	/**
	 * ActionListener-Methode fuer die Auswahl eines Suchergebnisses fuer die Selektion.
	 *
	 * @param event
	 *            {@link ActionEvent} Instanz.
	 */
	public void toggleLieferant(final ActionEvent event) {
		final HtmlCommandLink link = (HtmlCommandLink) event.getComponent();
		final DataTable dataTable = (DataTable) link.getParent().getParent();
		final Object rowData = dataTable.getRowData();
		final Duns duns = (Duns) rowData;
		if (getModel().getSelectedLieferantList().contains(duns)) {
			getModel().getSelectedLieferantList().remove(duns);
		} else {
			if (!getModel().isMaxLieferantSelected()) {
				getModel().getSelectedLieferantList().add(duns);
				Collections.sort(getModel().getSelectedLieferantList());
			}
		}
		updateDialogSettingsChanged();
	}

	/**
	 * Anzeigen der lokalen Lieferantennummern ja/nein.
	 *
	 * @param duns
	 *            selected Duns
	 */
	public void toggleLoliAnzeige(final Duns duns) {
		duns.setAufgeklappt(!duns.isAufgeklappt());
		if (duns.isAufgeklappt() && CollectionsToolkit.isEmpty(duns.getLieferantenLolis())) {
			duns.setLieferantenLolis(getLieferantenLolis(duns));
		}
	}

	/**
	 * @see vwg.vw.inca.handler.AbstractAuswahlHandler#createModel()
	 */
	@Override
	protected LieferantAuswahlModel createModel() {
		return new LieferantAuswahlModel();
	}

	private List<Lieferant> getLieferantenLolis(final Duns duns) {
		try {
			final List<Lieferant> lieferanten = getDaoHelper().getLoliZuDuns(duns.getDuns());
			return lieferanten;
		} catch (final UncategorizedSQLException sqlException) {
			ManagedBeanProvider.getExceptionHandler()
				.handleUncategorizedSQLExceptionWithSendRedirect(sqlException,
					"loadLieferantenLolis", getClass().getName(), ExceptionHandler.ERROR_LOGLEVEL);
			return null;
		}
	}

	private void initSuchfilter() {
		try {
			final List<Land> lieferantenLaender = getDaoHelper().getLieferantenLaender();
			this.suchfilter = new LieferantSuchfilter(lieferantenLaender,
				FreigabeStatus.FREIGABE_STATUS_LIST);
		} catch (final UncategorizedSQLException sqlException) {
			ManagedBeanProvider.getExceptionHandler()
				.handleUncategorizedSQLExceptionWithSendRedirect(sqlException, "initSuchfilter",
					"LieferantAuswahlHandler", ExceptionHandler.ERROR_LOGLEVEL);
		}
	}

}
